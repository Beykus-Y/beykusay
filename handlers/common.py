from aiogram import types, Bot
from aiogram.enums import ContentType
from config import config
from services import ai, moderation
from services.stats_manager import stats_manager
import logging
from aiogram.exceptions import TelegramNetworkError
import asyncio

logger = logging.getLogger(__name__)

async def handle_message(message: types.Message, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (
        message.chat.type in {"group", "supergroup"} 
        and message.content_type == ContentType.TEXT
        and not message.from_user.is_bot
    ):
        try:
            stats_manager.update_user(message.chat.id, message.from_user.id)
            logging.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {message.from_user.id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
    if moderation.contains_bad_words(message.text):
        try:
            await message.delete()
            await message.answer("üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
    if message.chat.type in {"group", "supergroup"} and not message.from_user.is_bot:
        try:
            await ai.add_to_chat_context(
                chat_id=message.chat.id,
                text=message.text,
                role="user"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤
    max_retries = 3
    bot_info = None
    for attempt in range(max_retries):
        try:
            bot_info = await bot.get_me()
            break
        except TelegramNetworkError:
            if attempt == max_retries - 1:
                await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            await asyncio.sleep(2)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –æ—Ç–≤–µ—Ç–∞
    bot_username = bot_info.username.lower()
    bot_id = bot_info.id

    should_respond = (
        message.reply_to_message 
        and message.reply_to_message.from_user.id == bot_id
    ) or any([
        f"@{bot_username}" in message.text.lower(),
        str(bot_id) in message.text
    ])

    if not should_respond:
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    try:
        response = await ai.get_ai_response(chat_id=message.chat.id, text=message.text)
        for chunk in ai.split_long_message(response):
            await message.reply(chunk[:config.MAX_MESSAGE_LENGTH], parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")