from aiogram import types, Bot
from aiogram.enums import ContentType
from config import config
from services import ai, moderation
from services.stats_manager import stats_manager
import logging
from aiogram.exceptions import TelegramNetworkError
import asyncio

logger = logging.getLogger(__name__)

import re
import logging
import asyncio
from typing import List
from aiogram import Bot, types
from aiogram.types import ContentType
from aiogram.exceptions import TelegramNetworkError

async def handle_message(message: types.Message, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (
        message.chat.type in {"group", "supergroup"} 
        and message.content_type == ContentType.TEXT
        and not message.from_user.is_bot
    ):
        try:
            stats_manager.update_user(message.chat.id, message.from_user.id)
            logging.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {message.from_user.id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞
    if not message.text:
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
    if moderation.contains_bad_words(message.text):
        try:
            await message.delete()
            await message.answer("üö´ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        return
        
    # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
    if message.chat.type in {"group", "supergroup"} and not message.from_user.is_bot:
        try:
            await ai.add_to_chat_context(
                chat_id=message.chat.id,
                text=message.text,
                role="user"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤
    max_retries = 3
    bot_info = None
    for attempt in range(max_retries):
        try:
            bot_info = await bot.get_me()
            break
        except TelegramNetworkError:
            if attempt == max_retries - 1:
                await message.answer("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            await asyncio.sleep(2)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –æ—Ç–≤–µ—Ç–∞
    bot_username = bot_info.username.lower()
    bot_id = bot_info.id
    should_respond = (
        message.reply_to_message 
        and message.reply_to_message.from_user.id == bot_id
    ) or any([
        f"@{bot_username}" in message.text.lower(),
        str(bot_id) in message.text
    ])
    
    if not should_respond:
        return
        
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
        response = await ai.get_ai_response(chat_id=message.chat.id, text=message.text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if isinstance(response, list):
            parts = []
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            full_response = "".join(response)
            # –ò —Ä–∞–∑–±–∏–≤–∞–µ–º —Å —É—á–µ—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            parts = split_markdown_safe(full_response, max_length=2000)
        else:
            parts = split_markdown_safe(response, max_length=2000)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
        for part in parts:
            if not part:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —á–∞—Å—Ç–∏
                continue
                
            try:
                await message.reply(text=part, parse_mode="Markdown")
            except Exception as part_error:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(part_error)}")
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                try:
                    await message.reply(text=part, parse_mode=None)
                except Exception:
                    # –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –ø—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É
                    clean_part = remove_markdown(part)
                    await message.reply(text=clean_part[:2000])
                    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}", exc_info=True)
        try:
            await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        except Exception as reply_error:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {str(reply_error)}")

def remove_markdown(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É Markdown –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    patterns = [
        r'\*\*(.*?)\*\*',  # Bold
        r'\*(.*?)\*',      # Italic
        r'__(.*?)__',      # Underline
        r'_([^_]+)_',      # Italic
        r'`(.*?)`',        # Code
        r'```(.*?)```',    # Code block
        r'\[(.*?)\]\((.*?)\)'  # Links
    ]
    
    result = text
    for pattern in patterns:
        result = re.sub(pattern, r'\1', result)
    
    return result

def split_markdown_safe(text: str, max_length: int = 2000) -> List[str]:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ Markdown-—Ä–∞–∑–º–µ—Ç–∫–∏.
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    if len(text) <= max_length:
        return [text]
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ Markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    md_patterns = {
        'bold': r'\*\*(.*?)\*\*',
        'italic': r'\*(.*?)\*',
        'underline': r'__(.*?)__',
        'italic_alt': r'_([^_]+)_',
        'code': r'`(.*?)`',
        'code_block': r'```(.*?)```',
        'link': r'\[(.*?)\]\((.*?)\)'
    }
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ
    formatted_blocks = []
    for pattern_type, pattern in md_patterns.items():
        for match in re.finditer(pattern, text, re.DOTALL):
            formatted_blocks.append({
                'type': pattern_type,
                'start': match.start(),
                'end': match.end(),
                'text': match.group(0)
            })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
    formatted_blocks.sort(key=lambda x: x['start'])
    
    parts = []
    current_pos = 0
    
    while current_pos < len(text):
        # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –º–µ–Ω—å—à–µ max_length, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ —Ü–µ–ª–∏–∫–æ–º
        if len(text) - current_pos <= max_length:
            parts.append(text[current_pos:])
            break
        
        # –ò—â–µ–º —Ö–æ—Ä–æ—à–µ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        cut_pos = current_pos + max_length
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑—Ä–µ–∑–∞–µ–º –ª–∏ –º—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫
        safe_cut_pos = cut_pos
        for block in formatted_blocks:
            if current_pos < block['start'] < cut_pos < block['end']:
                # –ú—ã –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞, –∏—â–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–æ –Ω–∞—á–∞–ª–∞ –±–ª–æ–∫–∞
                safe_cut_pos = min(safe_cut_pos, block['start'])
            elif block['start'] <= current_pos < block['end'] <= cut_pos:
                # –ë–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏ –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–µ–π –∂–µ
                pass
            elif current_pos <= block['start'] < block['end'] <= cut_pos:
                # –ë–ª–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏
                pass
            elif block['start'] <= current_pos < cut_pos < block['end']:
                # –ë–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–æ –∏–ª–∏ –≤ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–µ–µ
                # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞ –±–ª–æ–∫–∞
                safe_cut_pos = min(safe_cut_pos, current_pos + max_length // 2)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑-–∑–∞ –±–ª–æ–∫–∞, –∏—â–µ–º –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∞–±–∑–∞—Ü–∞
        if safe_cut_pos < current_pos + max_length // 2:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
            newline_pos = text.rfind('\n', current_pos, cut_pos)
            if newline_pos > current_pos + max_length // 3:
                safe_cut_pos = newline_pos + 1
            else:
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É —Å –ø—Ä–æ–±–µ–ª–æ–º
                sentence_pos = text.rfind('. ', current_pos, cut_pos)
                if sentence_pos > current_pos + max_length // 3:
                    safe_cut_pos = sentence_pos + 2
                else:
                    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª
                    space_pos = text.rfind(' ', current_pos, cut_pos)
                    if space_pos > current_pos + max_length // 3:
                        safe_cut_pos = space_pos + 1
                    else:
                        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ—Å—Ç–æ —Ä–∞–∑—Ä–µ–∑–∞–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ
                        safe_cut_pos = cut_pos
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
        parts.append(text[current_pos:safe_cut_pos])
        current_pos = safe_cut_pos
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å Markdown –≤ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    balanced_parts = []
    md_markers = ['*', '**', '_', '__', '`', '```']
    
    for part in parts:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É –º–∞—Ä–∫–µ—Ä–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        balanced_part = part
        for marker in md_markers:
            count = balanced_part.count(marker)
            if count % 2 != 0:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –∏ —É–¥–∞–ª—è–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–∞ –∫–æ–Ω—Ü–µ
                last_idx = balanced_part.rfind(marker)
                if last_idx > len(balanced_part) - len(marker) - 10:  # –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä –±–ª–∏–∑–∫–æ –∫ –∫–æ–Ω—Ü—É
                    balanced_part = balanced_part[:last_idx] + balanced_part[last_idx+len(marker):]
        
        balanced_parts.append(balanced_part)
    
    return balanced_parts