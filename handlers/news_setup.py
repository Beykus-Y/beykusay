from aiogram import F, types, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from services.news_service import news_service
from states import NewsSetupStates
from config import config
import logging
import re
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("news_setup"))
async def start_setup(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π"""
    try:
        await message.answer(
            "üì∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π:\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
            "2. –ü—Ä–∏—à–ª–∏—Ç–µ @username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")]
            ])
        )
        await state.set_state(NewsSetupStates.waiting_channel)
        logger.info(f"–ù–∞—á–∞—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "cancel")
async def cancel_setup(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await state.clear()
    await callback.message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –Ω–∞—Å—Ç—Ä–æ–π–∫—É")

@router.message(NewsSetupStates.waiting_channel)
async def process_channel(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ username –∫–∞–Ω–∞–ª–∞"""
    try:
        channel_username = message.text.strip().lstrip('@')
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∫–∞–Ω–∞–ª: {channel_username}")
        
        chat = await message.bot.get_chat(f"@{channel_username}")
        admins = await message.bot.get_chat_administrators(chat.id)
        bot_id = (await message.bot.get_me()).id
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        if not any(admin.user.id == user_id for admin in admins):
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {channel_username}")
            await message.answer("‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –¥–ª—è –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        if not any(admin.user.id == bot_id for admin in admins):
            logger.warning(f"–ë–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ {channel_username}")
            await message.answer("‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞!")
            return
            
        await state.update_data(channel=chat.id)
        await message.answer(
            "‚úÖ –ö–∞–Ω–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n" 
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã: {', '.join(config.RSS_MAPPING.keys())}"
        )
        await state.set_state(NewsSetupStates.waiting_topics)
        logger.info(f"–ö–∞–Ω–∞–ª {channel_username} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await message.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤!")

@router.message(NewsSetupStates.waiting_topics)
async def process_topics(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏–∫"""
    try:
        user_tags = [t.strip().lower() for t in message.text.split(",")]
        valid_tags = []
        invalid_tags = []
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤
        for tag in user_tags:
            if tag in config.RSS_MAPPING:
                valid_tags.append(tag)
            else:
                invalid_tags.append(tag)
        
        if invalid_tags:
            await message.answer(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ–≥–∏: {', '.join(invalid_tags)}\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏: {', '.join(config.RSS_MAPPING.keys())}"
            )
            return
            
        if not valid_tags:
            await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Ç–µ–≥–∞!")
            return
            
        await state.update_data(tags=valid_tags)
        await message.answer(
            "‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00, 18:00)\n"
            "–§–æ—Ä–º–∞—Ç: –ß–ß:MM",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ö–∞–∂–¥—ã–π —á–∞—Å", callback_data="default_schedule")]
            ])
        )
        await state.set_state(NewsSetupStates.waiting_schedule)
        logger.info(f"–í–∞–ª–∏–¥–Ω—ã–µ —Ç–µ–≥–∏: {valid_tags}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–º: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(NewsSetupStates.waiting_schedule)
async def process_schedule(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    try:
        time_pattern = re.compile(r'^([01]?[0-9]|2[0-3]):([0-5][0-9])$')
        raw_times = message.text.split(",")
        normalized = []
        errors = []

        for raw_time in raw_times:
            time_str = raw_time.strip().replace(" ", "").replace(";", ":")
            if not time_pattern.match(time_str):
                errors.append(raw_time.strip())
                continue
                
            try:
                hours, minutes = map(int, time_str.split(":"))
                normalized_time = f"{hours:02d}:{minutes:02d}"
                normalized.append(normalized_time)
            except ValueError:
                errors.append(raw_time.strip())

        if errors:
            error_examples = "\n".join([f"‚Ä¢ {e} ‚Üí –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç" for e in errors[:3]])
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏:\n{error_examples}\n"
                "‚úÖ –ü—Ä–∏–º–µ—Ä: 09:00, 18:30, 23:59",
                parse_mode="Markdown"
            )
            return

        data = await state.get_data()
        news_service.add_subscription(
            channel_id=data["channel"],
            topics=data["tags"],
            schedule=normalized
        )
        
        await message.answer(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"‚Ä¢ –¢–µ–º—ã: {', '.join(data['tags'])}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: {', '.join(normalized)}"
        )
        await state.clear()
        
    except KeyError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await message.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "default_schedule")
async def set_default_schedule(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        hourly_schedule = [f"{hour:02d}:00" for hour in range(24)]
        await state.update_data(schedule=hourly_schedule)
        data = await state.get_data()
        
        if not all(key in data for key in ("channel", "tags")):
            logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–µ—Å—Å–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.")
            return
            
        rss_urls = []
        for tag in data["tags"]:
            rss_urls.extend(config.RSS_MAPPING.get(tag, []))
            
        news_service.add_subscription(
            channel_id=data["channel"],
            rss_urls=list(set(rss_urls)),
            schedule=hourly_schedule
        )
        
        await callback.message.answer(
            "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
            f"‚Ä¢ –¢–µ–º—ã: {', '.join(data['tags'])}\n"
            f"‚Ä¢ –í—Ä–µ–º—è: –∫–∞–∂–¥—ã–π —á–∞—Å"
        )
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {data['channel']}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!")
    finally:
        await state.clear()