from aiogram import types, Bot
from services.ai import reset_chat_context
from services.warn_manager import warn_manager
from aiogram.filters import Command
from aiogram.types import User
from aiogram import Router
from services.stats_manager import stats_manager
import logging
from filters.admin import IsAdminFilter
from services.prompt_manager import prompt_manager
from services.context_manager import reset_chat_context
from services.news_service import news_service
from services.get_charts import show_charts_handler

logger = logging.getLogger(__name__) 

admin_router = Router()

async def check_target_is_admin(chat_id: int, user_id: int, bot: Bot) -> bool:
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in ["administrator", "creator"]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —Ü–µ–ª–∏: {str(e)}")
        return False

async def show_warns(message: types.Message):
    chat_id = message.chat.id
    
    if message.reply_to_message:
        user = message.reply_to_message.from_user
        warn_count = warn_manager.get_warns(chat_id, user.id)
        await message.answer(
            f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –∏–º–µ–µ—Ç {warn_count}/5 –≤–∞—Ä–Ω–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ."
        )
    else:
        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—Ä–Ω—ã –≤ —á–∞—Ç–µ
        warns = warn_manager.get_chat_warns(chat_id)
        if not warns:
            await message.answer("–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞—Ä–Ω–æ–≤.")
            return
            
        warn_list = ["üö® –°–ø–∏—Å–æ–∫ –≤–∞—Ä–Ω–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:"]
        for user_id, count in warns.items():
            try:
                user = await message.bot.get_chat(user_id)
                name = user.full_name
            except Exception:
                name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id}"
                
            warn_list.append(f"‚Ä¢ {name}: {count} –≤–∞—Ä–Ω(–∞)")
        
        await message.answer("\n".join(warn_list))

async def unwarn_user(message: types.Message):
    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    user = message.reply_to_message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ü–µ–ª—å –Ω–µ –±–æ—Ç
    if user.is_bot:
        await message.answer("üö´ –£ –±–æ—Ç–∞ –Ω–µ—Ç –≤–∞—Ä–Ω–æ–≤!")
        return
    
    if await check_target_is_admin(message.chat.id, user.id, message.bot):
        await message.answer("‚ÑπÔ∏è –£ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ—Ç –≤–∞—Ä–Ω–æ–≤")
        return


    try:
        count = int(message.text.split()[1])
        count = max(1, min(3, count))
    except (IndexError, ValueError):
        count = 1

    new_count = warn_manager.remove_warn(message.chat.id, user.id, count)
    
    await message.answer(
        f"‚úÖ –°–Ω—è—Ç–æ {count} –≤–∞—Ä–Ω(–∞) —Å {user.full_name}. "
        f"–¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {new_count}/5."
    )

async def ban_user(message: types.Message):
    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    user = message.reply_to_message.from_user
    
    if user.is_bot:
        await message.answer("üö´ –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –±–æ—Ç–∞!")
        return
    
    if await check_target_is_admin(message.chat.id, user.id, message.bot):
        await message.answer("üö´ –ù–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return


    try:
        await message.chat.ban(user.id)
        await message.answer(f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –∑–∞–±–∞–Ω–µ–Ω")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞: {str(e)}")

async def unban_user(message: types.Message):
    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    user = message.reply_to_message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ü–µ–ª—å –Ω–µ –±–æ—Ç
    if user.is_bot:
        await message.answer("üö´ –ù–µ–ª—å–∑—è —Ä–∞–∑–±–∞–Ω–∏—Ç—å –±–æ—Ç–∞ (–æ–Ω –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω)!")
        return
    
    if await check_target_is_admin(message.chat.id, user.id, message.bot):
        await message.answer("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω")
        return

    try:
        await message.chat.unban(user.id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} —Ä–∞–∑–±–∞–Ω–µ–Ω")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: {str(e)}")

async def warn_user(message: types.Message):
    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    user = message.reply_to_message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ü–µ–ª—å –Ω–µ –±–æ—Ç
    if user.is_bot:
        await message.answer("üö´ –ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω –±–æ—Ç—É!")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ü–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if await check_target_is_admin(message.chat.id, user.id, message.bot):
        await message.answer("üö´ –ù–µ–ª—å–∑—è –≤—ã–¥–∞—Ç—å –≤–∞—Ä–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")
        return

    warn_count = warn_manager.add_warn(message.chat.id, user.id)
    await message.answer(
        f"‚ö†Ô∏è {user.full_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {warn_count}/5 –≤–∞—Ä–Ω–æ–≤."
    )
    
    if warn_count >= 5:
        await message.chat.ban(user.id)
        await message.answer(f"üö® {user.full_name} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ 5 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
        warn_manager.remove_warn(message.chat.id, user.id, 5)

async def show_stats(message: types.Message):
    chat_id = message.chat.id
    top_users = stats_manager.get_chat_stats(chat_id)
    
    if not top_users:
        await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    stats_text = ["üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"]
    
    for index, (user_id, count) in enumerate(top_users, 1):
        try:
            user = await message.bot.get_chat(user_id)
            name = user.full_name
        except Exception:
            name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id}"
            
        stats_text.append(f"{index}. {name}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")

    await message.answer("\n".join(stats_text))


async def clear_history(message: types.Message):
    chat_id = message.chat.id
    reset_chat_context(chat_id)
    await message.answer("üîÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")

async def delete_message(message: types.Message):
    if not message.reply_to_message:
        await message.answer("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ (—Ä–µ–ø–ª–∞–π) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!")
        return

    try:
        await message.reply_to_message.delete()
        await message.delete()
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

async def set_prompt(message: types.Message):
    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –ø—Ä–æ–º–ø—Ç–æ–º!")
        return
    
    new_prompt = message.reply_to_message.text
    prompt_manager.set_prompt(message.chat.id, new_prompt)
    await message.answer("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    reset_chat_context(message.chat.id)

async def reset_prompt(message: types.Message):
    prompt_manager.reset_prompt(message.chat.id)
    await message.answer("‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ!")
    reset_chat_context(message.chat.id)

@admin_router.message(Command('charts'), IsAdminFilter())
async def charts_command(message: types.Message):
    await show_charts_handler(message)

@admin_router.message(Command('subscribe'),)
async def subscribe_topic(message: types.Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É: /subscribe tech")
        return
    
    topic = args[1]
    news_service.subscriptions[message.chat.id] = {"topics": [topic]}
    await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–µ–º—É '{topic}' –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")
