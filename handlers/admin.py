from aiogram import types
from services.ai import reset_chat_context
from services.warn_manager import warn_manager
from aiogram.filters import Command
from aiogram.types import User
from services.stats_manager import stats_manager

async def ban_user(message: types.Message):
    if message.reply_to_message:
        user = message.reply_to_message.from_user
        await message.chat.ban(user.id)
        await message.answer(f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –∑–∞–±–∞–Ω–µ–Ω")

async def warn_user(message: types.Message):
    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    user = message.reply_to_message.from_user
    warn_count = warn_manager.add_warn(user.id)
    
    await message.answer(
        f"‚ö†Ô∏è {user.full_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! "
        f"–¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {warn_count}/5 –≤–∞—Ä–Ω–æ–≤."
    )

    if warn_count >= 5:
        await message.chat.ban(user.id)
        await message.answer(f"üö® {user.full_name} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ 5 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!")
        warn_manager.remove_warn(user.id, 5)  # –°–±—Ä–æ—Å –≤–∞—Ä–Ω–æ–≤

async def show_stats(message: types.Message):
    top_users = stats_manager.get_top_users()
    
    if not top_users:
        await message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    stats_text = ["üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"]
    
    for index, (user_id, count) in enumerate(top_users, 1):
        try:
            user = await message.bot.get_chat(user_id)
            name = user.full_name
        except Exception:
            name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #{user_id}"
            
        stats_text.append(f"{index}. {name}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π")

    await message.answer("\n".join(stats_text))

async def unwarn_user(message: types.Message):
    if not message.reply_to_message:
        await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
        return

    try:
        count = int(message.text.split()[1])
        count = max(1, min(3, count))  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1-3
    except (IndexError, ValueError):
        count = 1

    user = message.reply_to_message.from_user
    new_count = warn_manager.remove_warn(user.id, count)
    
    await message.answer(
        f"‚úÖ –°–Ω—è—Ç–æ {count} –≤–∞—Ä–Ω(–∞) —Å {user.full_name}. "
        f"–¢–µ–ø–µ—Ä—å —É –Ω–µ–≥–æ {new_count}/5."
    )

async def clear_history(message: types.Message):
    user_id = message.from_user.id
    reset_chat_context(user_id)
    await message.answer("üîÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!")

async def delete_message(message: types.Message):
    if not message.reply_to_message:
        await message.answer("‚ÑπÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ (—Ä–µ–ø–ª–∞–π) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!")
        return

    try:
        await message.reply_to_message.delete()
        await message.delete()
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")